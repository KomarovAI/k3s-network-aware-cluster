name: Deploy K3S Enhanced Cluster

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options: [deploy, upgrade, destroy]

jobs:
  deploy:
    if: ${{ github.event.inputs.action == 'deploy' || github.event.inputs.action == '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH keys
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.VPS_SSH_KEY }}
            ${{ secrets.WORKER_SSH_KEY }}

      - name: Prepare environment
        run: |
          echo "K3S_TOKEN=${{ secrets.K3S_TOKEN }}" >> $GITHUB_ENV
          echo "TLS_DOMAIN=${{ secrets.TLS_DOMAIN }}" >> $GITHUB_ENV
          echo "ACME_EMAIL=${{ secrets.ACME_EMAIL }}" >> $GITHUB_ENV
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> $GITHUB_ENV
          echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" >> $GITHUB_ENV
          echo "CF_API_TOKEN=${{ secrets.CF_API_TOKEN }}" >> $GITHUB_ENV
          echo "CF_ZONE_ID=${{ secrets.CF_ZONE_ID }}" >> $GITHUB_ENV

      - name: Install master (VPS)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/k3s && sudo apt-get update -y && sudo apt-get install -y curl jq python3"
          scp -o StrictHostKeyChecking=no scripts/install_cluster_enhanced.py ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }}:~/k3s/
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "cd ~/k3s && K3S_TOKEN='${K3S_TOKEN}' TLS_DOMAIN='${TLS_DOMAIN}' ACME_EMAIL='${ACME_EMAIL}' python3 install_cluster_enhanced.py --mode master"

      - name: Retrieve join script
        run: |
          scp -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }}:~/join_worker_enhanced.py ./

      - name: Install worker (Home PC)
        run: |
          scp -o StrictHostKeyChecking=no ./join_worker_enhanced.py ${{ secrets.WORKER_SSH_USER }}@${{ secrets.WORKER_HOST }}:/tmp/
          ssh -o StrictHostKeyChecking=no ${{ secrets.WORKER_SSH_USER }}@${{ secrets.WORKER_HOST }} "python3 /tmp/join_worker_enhanced.py"

      - name: Apply base manifests
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "kubectl version --short && kubectl apply -k manifests/base/"

      - name: Install ingress-nginx
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.0/deploy/static/provider/cloud/deploy.yaml"

      - name: Install cert-manager
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.3/cert-manager.crds.yaml && kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f - && kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.3/cert-manager.yaml"

      - name: Apply ClusterIssuers (HTTP-01)
        run: |
          envsubst < manifests/cert-manager/clusterissuer-http01.yaml | ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "cat > /tmp/clusterissuer-http01.yaml && kubectl apply -f /tmp/clusterissuer-http01.yaml"

      - name: Apply ClusterIssuers (DNS-01, optional)
        if: ${{ env.CF_API_TOKEN != '' }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "kubectl -n cert-manager create secret generic cloudflare-api-token --from-literal=api-token='${CF_API_TOKEN}' --dry-run=client -o yaml | kubectl apply -f -"
          envsubst < manifests/cert-manager/clusterissuer-dns01-cloudflare.yaml | ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "cat > /tmp/clusterissuer-dns01.yaml && kubectl apply -f /tmp/clusterissuer-dns01.yaml"

      - name: Production hardening
        run: |
          scp -o StrictHostKeyChecking=no scripts/production_hardening.py ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }}:/tmp/
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "ACME_EMAIL='${ACME_EMAIL}' TLS_DOMAIN='${TLS_DOMAIN}' DOCKERHUB_USERNAME='${DOCKERHUB_USERNAME}' DOCKERHUB_TOKEN='${DOCKERHUB_TOKEN}' GRAFANA_ADMIN_PASSWORD='${GRAFANA_ADMIN_PASSWORD}' python3 /tmp/production_hardening.py apply"

      - name: Apply prod overlays
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "kubectl apply -k manifests/prod/"

  upgrade:
    if: ${{ github.event.inputs.action == 'upgrade' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Re-apply manifests
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "kubectl apply -k manifests/base/ && kubectl apply -k manifests/prod/"

  destroy:
    if: ${{ github.event.inputs.action == 'destroy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Teardown cluster (use with care)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_SSH_USER }}@${{ secrets.VPS_HOST }} "sudo /usr/local/bin/k3s-uninstall.sh || true"
          ssh -o StrictHostKeyChecking=no ${{ secrets.WORKER_SSH_USER }}@${{ secrets.WORKER_HOST }} "sudo /usr/local/bin/k3s-agent-uninstall.sh || true"
