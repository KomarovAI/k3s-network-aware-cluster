# GitHub Actions Workflow –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è —Å–µ—Ä–≤–∏—Å–∞
# –ü–æ–º–µ—Å—Ç–∏—Ç—å –≤ .github/workflows/deploy.yml –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–∏—Å–∞

name: Build and Deploy Service

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKER_REGISTRY: docker.io  # –∏–ª–∏ ghcr.io –¥–ª—è GitHub Container Registry
  SERVICE_NAME: my-service     # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
  KUBE_NAMESPACE: production   # –∏–ª–∏ staging
  
  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kubernetes
  KUBE_SERVER: https://your-vps-tailscale-ip:6443  # –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π IP
  DOMAIN_BASE: ${{ vars.DOMAIN_BASE }}  # cockpit.work.gd

jobs:
  # –¢–µ—Å—Ç—ã –Ω–∞ –∫–∞–∂–¥—ã–π push/PR
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js / Python / Go
      uses: actions/setup-node@v4  # –∏–ª–∏ actions/setup-python@v4, actions/setup-go@v4
      with:
        node-version: '18'  # –∏–ª–∏ python-version: '3.11', go-version: '1.21'
    
    - name: Install dependencies
      run: |
        npm ci  # –∏–ª–∏ pip install -r requirements.txt, go mod download
    
    - name: Run unit tests
      run: |
        npm test  # –∏–ª–∏ pytest, go test ./...
    
    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit
        docker-compose -f docker-compose.test.yml down

  # –ë–∏–ª–¥ –∏ –¥–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ –Ω–∞ main
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    # –ë–∏–ª–¥ Docker –æ–±—Ä–∞–∑–∞
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:latest .
    
    # Push –≤ Docker Hub
    - name: Push to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:latest
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ kubectl
    - name: Setup kubectl
      run: |
        # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ kubeconfig (base64)
        echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > /tmp/kubeconfig
        export KUBECONFIG=/tmp/kubeconfig
        
        # –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ ServiceAccount —Ç–æ–∫–µ–Ω (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
        # kubectl config set-cluster k3s --server=${{ env.KUBE_SERVER }} --insecure-skip-tls-verify=true
        # kubectl config set-credentials cicd --token=${{ secrets.KUBE_TOKEN }}
        # kubectl config set-context k3s --cluster=k3s --user=cicd
        # kubectl config use-context k3s
        
        kubectl version --client
        kubectl cluster-info
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ deployment
    - name: Deploy to Kubernetes
      env:
        KUBECONFIG: /tmp/kubeconfig
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # –ú–µ—Ç–æ–¥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ deployment
        kubectl set image deployment/${{ env.SERVICE_NAME }} ${{ env.SERVICE_NAME }}=${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${IMAGE_TAG} -n ${{ env.KUBE_NAMESPACE }}
        
        # –ú–µ—Ç–æ–¥ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤ (envsubst –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏)
        # export IMAGE_TAG=${IMAGE_TAG}
        # export SERVICE_NAME=${{ env.SERVICE_NAME }}
        # export DOMAIN_BASE=${{ env.DOMAIN_BASE }}
        # envsubst < k8s/deployment.yaml | kubectl apply -f -
        # envsubst < k8s/service.yaml | kubectl apply -f -
        # envsubst < k8s/ingress.yaml | kubectl apply -f -
        
        # –û–∂–∏–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ rollout
        kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
    
    # Health check
    - name: Health check
      env:
        KUBECONFIG: /tmp/kubeconfig
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥—ã –∑–¥–æ—Ä–æ–≤—ã
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=${{ env.SERVICE_NAME }}
        
        # HTTP health check
        sleep 10  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞—Ä—Ç
        curl -f https://${{ env.SERVICE_NAME }}.${{ env.DOMAIN_BASE }}/health || exit 1
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –¥–µ–ø–ª–æ–µ
    - name: Notify success
      if: success()
      run: |
        echo "üéâ Service ${{ env.SERVICE_NAME }} deployed successfully!"
        echo "URL: https://${{ env.SERVICE_NAME }}.${{ env.DOMAIN_BASE }}"
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: Slack/Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"üöÄ ${{ env.SERVICE_NAME }} deployed: ${{ github.sha }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
    
    # Rollback –ø—Ä–∏ –æ—à–∏–±–∫–µ
    - name: Rollback on failure
      if: failure()
      env:
        KUBECONFIG: /tmp/kubeconfig
      run: |
        echo "‚ùå Deployment failed, rolling back..."
        kubectl rollout undo deployment/${{ env.SERVICE_NAME }} -n ${{ env.KUBE_NAMESPACE }}
        kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n ${{ env.KUBE_NAMESPACE }} --timeout=180s
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"‚ùå ${{ env.SERVICE_NAME }} deployment failed and rolled back"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ auto-scaling –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–µ–ø–ª–æ–µ
  setup-scaling:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > /tmp/kubeconfig
        export KUBECONFIG=/tmp/kubeconfig
    
    - name: Apply HPA and KEDA ScaledObject
      env:
        KUBECONFIG: /tmp/kubeconfig
      run: |
        # –ü—Ä–∏–º–µ—Ä HPA
        kubectl apply -f - <<EOF
        apiVersion: autoscaling/v2
        kind: HorizontalPodAutoscaler
        metadata:
          name: ${{ env.SERVICE_NAME }}-hpa
          namespace: ${{ env.KUBE_NAMESPACE }}
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: ${{ env.SERVICE_NAME }}
          minReplicas: 2
          maxReplicas: 10
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 70
          - type: Resource
            resource:
              name: memory
              target:
                type: Utilization
                averageUtilization: 80
        EOF
        
        # –ü—Ä–∏–º–µ—Ä KEDA ScaledObject (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ event-driven scaling)
        # kubectl apply -f - <<EOF
        # apiVersion: keda.sh/v1alpha1
        # kind: ScaledObject
        # metadata:
        #   name: ${{ env.SERVICE_NAME }}-scaledobject
        #   namespace: ${{ env.KUBE_NAMESPACE }}
        # spec:
        #   scaleTargetRef:
        #     name: ${{ env.SERVICE_NAME }}
        #   minReplicaCount: 1
        #   maxReplicaCount: 20
        #   triggers:
        #   - type: prometheus
        #     metadata:
        #       serverAddress: http://prometheus.monitoring.svc:9090
        #       metricName: http_requests_per_second
        #       threshold: "100"
        #       query: sum(rate(http_requests_total{job="${{ env.SERVICE_NAME }}"}[1m]))
        # EOF
