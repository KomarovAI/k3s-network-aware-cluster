# Base RBAC Configuration
# Service Accounts and basic roles for secure cluster operation

---
# Apps namespace service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: apps-service-account
  namespace: apps
automountServiceAccountToken: false  # Security best practice
---
# Apps role (least privilege)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: apps-role
  namespace: apps
rules:
# Read access to ConfigMaps and Secrets (minimal needed)
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
# Read access to own pods (for health checks, service discovery)
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
# Read access to services (for service discovery)
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]
# Read access to endpoints (for service discovery)
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch"]
---
# Apps role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: apps-role-binding
  namespace: apps
subjects:
- kind: ServiceAccount
  name: apps-service-account
  namespace: apps
roleRef:
  kind: Role
  name: apps-role
  apiGroup: rbac.authorization.k8s.io
---
# System namespace service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: system-service-account
  namespace: system
automountServiceAccountToken: false
---
# System role (broader access for management tools)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: system-role
  namespace: system
rules:
# Full access to ConfigMaps and Secrets in system namespace
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["*"]
# Pod management for system tools
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Service management
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["*"]
# PVC management
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["*"]
---
# System role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: system-role-binding
  namespace: system
subjects:
- kind: ServiceAccount
  name: system-service-account
  namespace: system
roleRef:
  kind: Role
  name: system-role
  apiGroup: rbac.authorization.k8s.io
---
# Monitoring namespace service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: monitoring-service-account
  namespace: monitoring
automountServiceAccountToken: true  # Needs token for scraping
---
# Monitoring cluster role (cross-namespace access)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: monitoring-cluster-role
rules:
# Read access to nodes for node metrics
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "nodes/metrics"]
  verbs: ["get", "list", "watch"]
# Read access to pods and services across namespaces
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
# Read access to ConfigMaps across namespaces
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
# Read access to deployments and replicasets
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets"]
  verbs: ["get", "list", "watch"]
# Read access to ingresses
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
# Read access to network policies (for monitoring)
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch"]
---
# Monitoring cluster role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: monitoring-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: monitoring-service-account
  namespace: monitoring
roleRef:
  kind: ClusterRole
  name: monitoring-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
# Security namespace service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-service-account
  namespace: security
automountServiceAccountToken: true  # Needs token for external secrets
---
# Security role (minimal but sufficient for external secrets)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: security-role
  namespace: security
rules:
# Full access to secrets in security namespace
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["*"]
# Read access to ConfigMaps
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
# Access to external secrets CRDs (if ESO is used)
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "externalsecrets"]
  verbs: ["*"]
---
# Security role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: security-role-binding
  namespace: security
subjects:
- kind: ServiceAccount
  name: security-service-account
  namespace: security
roleRef:
  kind: Role
  name: security-role
  apiGroup: rbac.authorization.k8s.io
---
# Security cluster role (for cross-namespace secret management)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: security-cluster-role
rules:
# Create secrets in other namespaces (for external secrets)
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "patch", "get", "list", "watch"]
  resourceNames: []  # Restricted by external secrets operator
---
# Security cluster role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: security-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: security-service-account
  namespace: security
roleRef:
  kind: ClusterRole
  name: security-cluster-role
  apiGroup: rbac.authorization.k8s.io