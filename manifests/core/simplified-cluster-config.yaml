# Simplified K3S Cluster Configuration
# Uses standard K3S scheduler with intelligent node labeling
# Focus: VPS master + Home PC workers with network optimization

---
# Node labeling and tainting configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-node-config
  namespace: kube-system
  labels:
    app.kubernetes.io/name: cluster-config
    app.kubernetes.io/component: node-management
data:
  # VPS Master Node Configuration
  vps-master-labels: |
    node-type=vps
    role=control-plane
    compute-tier=management
    network-speed=10mbps
    network-latency=high
    zone=remote
    internet-access=true
    workload-isolation=true
  
  vps-master-taints: |
    k3s-controlplane=true:NoSchedule
    node-role.kubernetes.io/master=true:NoSchedule
    vps-resource-limited=true:NoSchedule
  
  # Home PC Worker Configuration
  worker-labels: |
    node-type=home-pc
    role=worker
    compute-tier=workload
    network-speed=1000mbps
    network-latency=low
    zone=local
    gpu-enabled=true
    high-performance=true
  
  # Network optimization settings
  network-optimization: |
    # Bandwidth allocation
    vps-upstream-limit=8mbps
    vps-downstream-limit=8mbps
    worker-local-bandwidth=1000mbps
    
    # Latency expectations
    vps-to-worker-latency=45ms
    worker-to-worker-latency=1ms
    
    # Cost factors for intelligent placement
    vps-cost-factor=0.9
    worker-cost-factor=0.1
---
# Basic network compression configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: network-compression-basic
  namespace: kube-system
  labels:
    app.kubernetes.io/name: network-optimization
    app.kubernetes.io/component: compression
data:
  # Basic compression settings (without complex gRPC)
  nginx-compression.conf: |
    # Enable compression for common types
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;
    gzip_comp_level 6;
    
    # Connection optimization
    keepalive_timeout 65;
    keepalive_requests 100;
    
    # Buffer optimization for slow VPS links
    client_body_buffer_size 1m;
    client_max_body_size 10m;
  
  # API server optimization
  apiserver-optimization.conf: |
    # Reduce API server verbosity for VPS
    max-requests-inflight=100
    max-mutating-requests-inflight=50
    request-timeout=30s
---
# Simplified monitoring (basic Prometheus)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-basic
  namespace: monitoring
  labels:
    app: prometheus
    tier: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      # Schedule on VPS (lightweight monitoring)
      nodeSelector:
        node-type: vps
      
      tolerations:
      - key: k3s-controlplane
        operator: Equal
        value: "true"
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--storage.tsdb.retention.time=7d'  # Short retention for VPS
          - '--storage.tsdb.retention.size=2GB'  # Limit storage
          - '--web.enable-lifecycle'
          - '--query.max-concurrency=5'  # Limit for VPS
        ports:
        - containerPort: 9090
          name: web
        resources:
          requests:
            memory: "200Mi"
            cpu: "100m"
          limits:
            memory: "500Mi"
            cpu: "300m"
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
      
      volumes:
      - name: config
        configMap:
          name: prometheus-basic-config
      - name: storage
        emptyDir:
          sizeLimit: 3Gi
---
# Basic Prometheus configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-basic-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 60s      # Longer intervals for VPS
      evaluation_interval: 60s
      external_labels:
        cluster: 'k3s-optimized'
        region: 'hybrid'
    
    scrape_configs:
    # Basic node metrics (built-in)
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
      
      # Keep only essential metrics to reduce bandwidth
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(up|node_cpu_seconds_total|node_memory_MemAvailable_bytes|node_filesystem_size_bytes|node_network_receive_bytes_total|node_network_transmit_bytes_total)'
        action: keep
    
    # Basic kubelet metrics
    - job_name: 'kubernetes-kubelet'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
---
# Basic Grafana (lightweight)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-basic
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      # Schedule on VPS for external access
      nodeSelector:
        node-type: vps
      
      tolerations:
      - key: k3s-controlplane
        operator: Equal
        value: "true"
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        ports:
        - containerPort: 3000
          name: web
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        - name: GF_SERVER_ROOT_URL
          value: "http://grafana.local"
        - name: GF_INSTALL_PLUGINS
          value: ""
        
        # VPS resource optimization
        - name: GF_DATABASE_MAX_IDLE_CONN
          value: "2"
        - name: GF_DATABASE_MAX_OPEN_CONN
          value: "5"
        - name: GF_SERVER_ENABLE_GZIP
          value: "true"
        
        resources:
          requests:
            memory: "50Mi"
            cpu: "50m"
          limits:
            memory: "200Mi"
            cpu: "200m"
        
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      
      volumes:
      - name: grafana-storage
        emptyDir:
          sizeLimit: 1Gi
---
# Services
apiVersion: v1
kind: Service
metadata:
  name: prometheus-basic
  namespace: monitoring
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    name: web
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-basic
  namespace: monitoring
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    name: web
---
# Monitoring namespace
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    purpose: basic-cluster-monitoring