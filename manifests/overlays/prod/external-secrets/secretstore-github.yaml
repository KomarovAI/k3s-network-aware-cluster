# External Secrets Operator - GitHub Provider
# Sync secrets from GitHub repository/organization secrets to Kubernetes

---
# SecretStore for GitHub Actions Secrets
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: github-secrets-store
  namespace: security
  labels:
    provider: github
    scope: repository
spec:
  provider:
    github:
      # GitHub App configuration (replace with your values)
      appID: "REPLACE_WITH_GITHUB_APP_ID"           # e.g., "123456"
      installationID: "REPLACE_WITH_INSTALLATION_ID" # e.g., "87654321"
      
      # GitHub App private key (stored as Kubernetes Secret)
      auth:
        privateKey:
          name: github-app-private-key
          key: private-key.pem
      
      # Repository/Organization to read secrets from
      owner: "KomarovAI"                            # Your GitHub username/org
      repo: "k3s-network-aware-cluster"             # This repository
---
# GitHub App Private Key Secret (create manually)
# kubectl create secret generic github-app-private-key \
#   --from-file=private-key.pem=/path/to/github-app-private-key.pem \
#   -n security
apiVersion: v1
kind: Secret
metadata:
  name: github-app-private-key
  namespace: security
  labels:
    provider: github
    secret-type: app-auth
  annotations:
    description: "GitHub App private key for External Secrets Operator"
    setup-command: "kubectl create secret generic github-app-private-key --from-file=private-key.pem=/path/to/app-key.pem -n security"
type: Opaque
data:
  # Replace with base64 encoded GitHub App private key
  private-key.pem: REPLACE_WITH_BASE64_ENCODED_PRIVATE_KEY
---
# ServiceAccount for External Secrets Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-operator
  namespace: security
  labels:
    app.kubernetes.io/name: external-secrets
automountServiceAccountToken: true
---
# Role for External Secrets Operator
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: external-secrets-role
  namespace: security
rules:
# Full access to secrets in security namespace
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["*"]
# Read access to external secrets CRDs
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "externalsecrets", "clustersecretstores"]
  verbs: ["get", "list", "watch"]
---
# ClusterRole for cross-namespace secret creation
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-cluster-role
rules:
# Create/update secrets in target namespaces
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "patch", "delete", "get", "list", "watch"]
# Read external secrets CRDs
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "externalsecrets", "clustersecretstores"]
  verbs: ["*"]
# Read events for status updates
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
# RoleBinding for security namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: external-secrets-role-binding
  namespace: security
subjects:
- kind: ServiceAccount
  name: external-secrets-operator
  namespace: security
roleRef:
  kind: Role
  name: external-secrets-role
  apiGroup: rbac.authorization.k8s.io
---
# ClusterRoleBinding for cross-namespace access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: external-secrets-operator
  namespace: security
roleRef:
  kind: ClusterRole
  name: external-secrets-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
# External Secrets Operator Deployment (pinned version)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-secrets-operator
  namespace: security
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/version: "v0.9.11"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: external-secrets
  template:
    metadata:
      labels:
        app.kubernetes.io/name: external-secrets
    spec:
      serviceAccountName: external-secrets-operator
      
      # Can run on VPS (lightweight)
      nodeSelector:
        node-type: vps
      tolerations:
      - key: vps-enhanced
        effect: PreferNoSchedule
      
      # Pod Security Standards compliant
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
      
      containers:
      - name: external-secrets
        image: ghcr.io/external-secrets/external-secrets:v0.9.11
        
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
        
        args:
        - --metrics-addr=:8080
        - --concurrent=5                     # Limited concurrency for VPS
        - --log-level=info
        
        ports:
        - containerPort: 8080
          name: metrics
        
        # Lightweight resources for VPS
        resources:
          requests:
            memory: "100Mi"
            cpu: "50m"
          limits:
            memory: "400Mi"
            cpu: "200m"
        
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi