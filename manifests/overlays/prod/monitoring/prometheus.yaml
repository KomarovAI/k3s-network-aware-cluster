# Enhanced Prometheus for Production (VPS optimized)
# Pinned version with resource allocation for 3 vCPU, 4GB RAM VPS

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    version: v2.47.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        monitoring: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: monitoring-service-account
      
      # VPS placement (can handle monitoring)
      nodeSelector:
        node-type: vps
        can-run-monitoring: "true"
      
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
      - key: vps-enhanced
        effect: PreferNoSchedule
      
      # Pod Security Standards compliant
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.2  # Pinned stable version
        
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
        
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --storage.tsdb.retention.time=14d      # 2 weeks retention
        - --storage.tsdb.retention.size=25GB     # Max storage (enhanced VPS: 100GB)
        - --web.enable-lifecycle
        - --web.enable-admin-api
        - --query.max-concurrency=20             # Higher with 3 vCPU
        - --query.timeout=2m
        - --storage.tsdb.min-block-duration=2h   # Reduce I/O
        - --storage.tsdb.max-block-duration=2h
        - --web.listen-address=0.0.0.0:9090
        
        ports:
        - name: web
          containerPort: 9090
          protocol: TCP
        
        # Enhanced resources for better VPS (3 vCPU, 4GB RAM)
        resources:
          requests:
            memory: "1Gi"        # Baseline for metrics storage
            cpu: "500m"          # 0.5 CPU baseline
          limits:
            memory: "2.5Gi"      # Can use up to 2.5GB (leave 1.5GB for system)
            cpu: "2000m"         # Can use up to 2 CPU cores
        
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        - name: tmp
          mountPath: /tmp
        
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
      
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        emptyDir:
          sizeLimit: 30Gi       # 30GB for metrics (enhanced VPS: 100GB)
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      
      terminationGracePeriodSeconds: 30
---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 30s                   # Frequent scraping with enhanced VPS
      evaluation_interval: 30s
      external_labels:
        cluster: 'k3s-enhanced-vps'
        region: 'hybrid'
        vps_tier: 'enhanced'
        bandwidth_profile: '1250MB-10MB'
    
    # Rules for alerting (minimal set)
    rule_files:
    - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
    
    # Kubernetes API Server
    - job_name: 'kubernetes-apiserver'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: ['default']
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: kubernetes;https
    
    # Enhanced node metrics (both VPS and Home PCs)
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics
    
    # Kubelet cAdvisor metrics (container metrics)
    - job_name: 'kubernetes-cadvisor'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      metrics_path: /metrics/cadvisor
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
    
    # Service endpoints with monitoring=true
    - job_name: 'kubernetes-service-endpoints'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: ${1}:${2}
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
    
    # Pod metrics with monitoring=true label
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: ${1}:${2}
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      # Add node info for placement analysis
      - source_labels: [__meta_kubernetes_pod_node_name]
        action: replace
        target_label: node_name
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  selector:
    app: prometheus