# Production Standards for K3S Cluster
# Implements NSA/CISA, CIS Benchmark, and CNCF security standards
# VPS Master: 3 vCPU, 4GB RAM, 100GB storage

---
# Production Apps Namespace with Pod Security Standards
apiVersion: v1
kind: Namespace
metadata:
  name: apps
  labels:
    name: apps
    # Pod Security Standards (PSA) - K8s v1.25+ standard
    pod-security.kubernetes.io/enforce: "baseline"
    pod-security.kubernetes.io/enforce-version: "v1.30"
    pod-security.kubernetes.io/audit: "restricted"
    pod-security.kubernetes.io/audit-version: "v1.30"
    pod-security.kubernetes.io/warn: "restricted"
    pod-security.kubernetes.io/warn-version: "v1.30"
  annotations:
    # Resource quota for namespace
    scheduler.alpha.kubernetes.io/preferred-anti-affinity: "true"
---
# Production System Namespace  
apiVersion: v1
kind: Namespace
metadata:
  name: system
  labels:
    name: system
    # More relaxed for system components
    pod-security.kubernetes.io/enforce: "baseline"
    pod-security.kubernetes.io/audit: "baseline"
    pod-security.kubernetes.io/warn: "baseline"
---
# Resource Quota for Apps Namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: apps-quota
  namespace: apps
spec:
  hard:
    # VPS Master: 3 vCPU, 4GB RAM - reserve resources for control plane
    requests.cpu: "8000m"      # Home PCs can use 8+ cores
    requests.memory: "32Gi"    # Home PCs have 16-32GB
    limits.cpu: "16000m"       # Max burst capacity
    limits.memory: "64Gi"      # Max memory usage
    
    # Storage limits (VPS: 100GB, distribute across nodes)
    requests.storage: "500Gi"  # Total storage across PVCs
    
    # Pod limits
    count/pods: "200"          # Max pods in namespace
    count/services: "50"       # Max services
    count/persistentvolumeclaims: "20"  # Max PVCs
---
# Default Network Policy - Deny All (NSA/CISA requirement)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: apps
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
# Allow DNS Resolution (Required for apps to function)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: apps
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
---
# Allow Ingress from NGINX Controller
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-from-nginx
  namespace: apps
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/part-of: platform
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: ingress-nginx
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 8080
---
# Allow internal communication within namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace
  namespace: apps
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector: {}
---
# Allow monitoring scraping
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-monitoring
  namespace: apps
spec:
  podSelector:
    matchLabels:
      monitoring: "true"
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Prometheus metrics
    - protocol: TCP
      port: 8080  # Custom metrics
---
# VPS Master Node Configuration (3 vCPU, 4GB RAM, 100GB)
apiVersion: v1
kind: ConfigMap
metadata:
  name: vps-master-config
  namespace: kube-system
  labels:
    node-type: vps
    resource-tier: enhanced
data:
  # VPS Specifications
  cpu-cores: "3"
  memory-gb: "4" 
  storage-gb: "100"
  network-speed: "1000mbps"  # Modern VPS bandwidth
  
  # Enhanced resource allocation (more generous with 4GB RAM)
  system-reserved-cpu: "300m"     # Reserve for system
  system-reserved-memory: "800Mi"
  kube-reserved-cpu: "500m"       # Reserve for K8s
  kube-reserved-memory: "1200Mi"
  
  # Available for workloads (if tolerations allow)
  available-cpu: "2200m"          # 2.2 cores available
  available-memory: "2000Mi"      # 2GB available
  
  # etcd optimization for 100GB storage
  etcd-quota-backend-bytes: "8589934592"  # 8GB
  etcd-auto-compaction: "1h"
  
  # API Server optimization for enhanced VPS
  api-server-max-requests: "200"    # Higher with more CPU
  api-server-max-mutating: "100"
  api-server-request-timeout: "60s"
---
# Enhanced Ingress Controller for better VPS (3 vCPU)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-enhanced
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    optimized-for: enhanced-vps
spec:
  replicas: 2  # Can run 2 replicas with 3 vCPU
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
    spec:
      nodeSelector:
        node-type: vps
      
      tolerations:
      - key: k3s-controlplane
        effect: NoSchedule
      - key: vps-resource-limited
        effect: NoSchedule
      
      # Pod Security Standards compliant
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 82
        fsGroup: 82
        seccompProfile:
          type: RuntimeDefault
      
      containers:
      - name: controller
        image: registry.k8s.io/ingress-nginx/controller:v1.10.0
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
            add: ["NET_BIND_SERVICE"]
          readOnlyRootFilesystem: false  # NGINX needs write access
        
        # Enhanced resource allocation for 3 vCPU VPS
        resources:
          requests:
            cpu: "400m"     # Higher with more CPU
            memory: "400Mi"  # Higher with more RAM
          limits:
            cpu: "800m"     # Can burst to 0.8 CPU
            memory: "800Mi"  # Can use up to 800MB
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        - containerPort: 8080
          name: webhook
        
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
          initialDelaySeconds: 10
          periodSeconds: 1
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
---
# Enhanced ConfigMap for NGINX (with better VPS resources)
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration-enhanced
  namespace: ingress-nginx
data:
  # Enhanced compression for 1Gbps VPS links
  enable-brotli: "true"
  brotli-level: "6"
  brotli-types: "application/json,application/javascript,text/css,text/plain,text/xml,application/xml+rss,application/atom+xml,image/svg+xml"
  
  gzip: "on"
  gzip-level: "6"
  gzip-min-length: "1024"
  gzip-types: "application/json,application/javascript,text/css,text/plain,text/xml"
  
  # Connection optimization for enhanced VPS
  keep-alive: "75s"
  keep-alive-requests: "1000"   # Higher with more CPU
  upstream-keepalive-connections: "64"  # More connections
  upstream-keepalive-timeout: "60s"
  
  # Worker optimization for 3 vCPU
  worker-processes: "3"         # Match CPU cores
  worker-connections: "2048"    # Higher with more RAM
  worker-rlimit-nofile: "4096"
  
  # Buffer optimization
  proxy-buffering: "on"
  proxy-buffer-size: "8k"       # Larger buffers with more RAM
  proxy-buffers: "16 8k"
  proxy-busy-buffers-size: "16k"
  
  # Request optimization
  client-max-body-size: "50m"   # Larger uploads with more storage
  large-client-header-buffers: "8 16k"  # More header space