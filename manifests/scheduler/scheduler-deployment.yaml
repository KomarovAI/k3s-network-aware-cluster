# Scheduler Deployment and Configuration
apiVersion: v1
kind: ServiceAccount
metadata:
  name: network-aware-scheduler
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: network-aware-scheduler
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["bindings", "pods/binding"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["pods/status"]
  verbs: ["patch", "update"]
- apiGroups: [""]
  resources: ["replicationcontrollers", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps", "extensions"]
  resources: ["replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["policy"]
  resources: ["poddisruptionbudgets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims", "persistentvolumes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses", "csinodes", "csidrivers", "csistoragecapacities"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["create", "get", "list", "update"]
- apiGroups: ["events.k8s.io"]
  resources: ["events"]
  verbs: ["create", "patch", "update"]
- apiGroups: ["network.komarov.dev"]
  resources: ["networktopologies"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: network-aware-scheduler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: network-aware-scheduler
subjects:
- kind: ServiceAccount
  name: network-aware-scheduler
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: network-scheduler-config
  namespace: kube-system
data:
  config.yaml: |
    apiVersion: kubescheduler.config.k8s.io/v1beta3
    kind: KubeSchedulerConfiguration
    profiles:
    - schedulerName: network-aware-scheduler
      plugins:
        filter:
          enabled:
          - name: NodeResourcesFit
          - name: NodeAffinity
          - name: NodePorts
          - name: VolumeRestrictions
          - name: EBSLimits
          - name: GCELimits
          - name: NodeVolumeLimits
          - name: AzureLimits
          - name: VolumeBinding
          - name: VolumeZone
          - name: PodTopologySpread
          - name: InterPodAffinity
          - name: NetworkAware
        score:
          enabled:
          - name: NodeResourcesFit
          - name: NodeAffinity
          - name: NodePreferAvoidPods
          - name: PodTopologySpread
          - name: InterPodAffinity
          - name: ImageLocality
          - name: TaintToleration
          - name: NetworkAware
          disabled:
          - name: "*"
        bind:
          enabled:
          - name: DefaultBinder
      pluginConfig:
      - name: NetworkAware
        args:
          topologyName: "komarov-network"
          updateInterval: "60s"
          
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-aware-scheduler
  namespace: kube-system
  labels:
    app: network-aware-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network-aware-scheduler
  template:
    metadata:
      labels:
        app: network-aware-scheduler
    spec:
      serviceAccountName: network-aware-scheduler
      containers:
      - name: scheduler
        image: komarovai/network-aware-scheduler:latest
        command:
        - /usr/local/bin/network-scheduler
        - --config=/etc/kubernetes/scheduler-config.yaml
        - --v=2
        - --leader-elect=true
        - --leader-elect-resource-name=network-aware-scheduler
        - --leader-elect-resource-namespace=kube-system
        ports:
        - name: metrics
          containerPort: 10259
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: /etc/kubernetes
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10259
            scheme: HTTPS
          initialDelaySeconds: 15
          timeoutSeconds: 15
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10259
            scheme: HTTPS
          timeoutSeconds: 5
      volumes:
      - name: config
        configMap:
          name: network-scheduler-config
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      priorityClassName: system-cluster-critical
---
# Network Controller Deployment
apiVersion: v1
kind: ServiceAccount
metadata:
  name: network-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: network-controller
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["network.komarov.dev"]
  resources: ["networktopologies"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: network-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: network-controller
subjects:
- kind: ServiceAccount
  name: network-controller
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-controller
  namespace: kube-system
  labels:
    app: network-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network-controller
  template:
    metadata:
      labels:
        app: network-controller
    spec:
      serviceAccountName: network-controller
      hostNetwork: true
      containers:
      - name: controller
        image: komarovai/network-controller:latest
        command:
        - /usr/local/bin/network-controller
        - --v=2
        - --topology-name=komarov-network
        - --update-interval=60s
        ports:
        - name: metrics
          containerPort: 8080
          protocol: TCP
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          capabilities:
            add:
            - NET_RAW
            - NET_ADMIN
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
---
# Service for metrics collection
apiVersion: v1
kind: Service
metadata:
  name: network-controller-metrics
  namespace: kube-system
  labels:
    app: network-controller
spec:
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: network-controller
---
# ServiceMonitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: network-controller
  namespace: kube-system
  labels:
    app: network-controller
spec:
  selector:
    matchLabels:
      app: network-controller
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics