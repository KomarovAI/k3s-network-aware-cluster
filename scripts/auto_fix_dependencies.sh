#!/bin/bash
# Auto-fix script –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è K8S Enterprise deployment

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîß AUTO-FIX –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô K8S ENTERPRISE DEPLOYMENT${NC}"
echo "==============================================================="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root/sudo
if [ "$EUID" -ne 0 ] && ! sudo -n true 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç—Ä–µ–±—É–µ—Ç sudo –ø—Ä–∞–≤–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤${NC}"
    echo "Please run: sudo ./scripts/auto_fix_dependencies.sh"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_step() {
    echo -e "${BLUE}üöÄ $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

# 1. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–ê–ö–ï–¢–ù–´–• –ú–ï–ù–ï–î–ñ–ï–†–û–í
log_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤..."

if command -v apt-get >/dev/null 2>&1; then
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -qq
    log_success "apt-get –æ–±–Ω–æ–≤–ª–µ–Ω"
elif command -v yum >/dev/null 2>&1; then
    yum update -y -q
    log_success "yum –æ–±–Ω–æ–≤–ª–µ–Ω"
elif command -v dnf >/dev/null 2>&1; then
    dnf update -y -q
    log_success "dnf –æ–±–Ω–æ–≤–ª–µ–Ω"
else
    log_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –ø—Ä–æ–ø—É—Å–∫..."
fi

echo ""

# 2. –£–°–¢–ê–ù–û–í–ö–ê –û–°–ù–û–í–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."

BASE_PACKAGES="curl wget jq python3 python3-pip gettext-base bc unzip gnupg lsb-release ca-certificates"

if command -v apt-get >/dev/null 2>&1; then
    # Ubuntu/Debian
    PACKAGES="$BASE_PACKAGES python3-yaml python3-requests python3-dev build-essential"
    apt-get install -y -qq $PACKAGES
    log_success "Ubuntu/Debian –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
elif command -v yum >/dev/null 2>&1; then
    # CentOS/RHEL 7
    PACKAGES="$BASE_PACKAGES python3-devel python3-yaml python3-requests gcc gcc-c++ make"
    yum install -y -q $PACKAGES
    log_success "CentOS/RHEL –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
elif command -v dnf >/dev/null 2>&1; then
    # Fedora/RHEL 8+
    PACKAGES="$BASE_PACKAGES python3-devel python3-pyyaml python3-requests gcc gcc-c++ make"
    dnf install -y -q $PACKAGES
    log_success "Fedora/RHEL 8+ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    log_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
    exit 1
fi

echo ""

# 3. PYTHON PACKAGES (—Å fallback –Ω–∞ pip)
log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º requests
if ! python3 -c "import requests" >/dev/null 2>&1; then
    log_warning "requests –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ pip..."
    python3 -m pip install --user requests
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º yaml
if ! python3 -c "import yaml" >/dev/null 2>&1; then
    log_warning "pyyaml –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ pip..."
    python3 -m pip install --user pyyaml
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
if python3 -c "import requests, yaml" >/dev/null 2>&1; then
    log_success "Python –ø–∞–∫–µ—Ç—ã –≥–æ—Ç–æ–≤—ã"
else
    log_error "Python –ø–∞–∫–µ—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    exit 1
fi

echo ""

# 4. HELM INSTALLATION
log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Helm..."

if command -v helm >/dev/null 2>&1; then
    HELM_VERSION=$(helm version --short 2>/dev/null || helm version --template='{{.Version}}' 2>/dev/null || echo "unknown")
    log_success "Helm —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $HELM_VERSION"
else
    log_step "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Helm..."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    ARCH=$(uname -m)
    case $ARCH in
        x86_64) ARCH="amd64" ;;
        aarch64) ARCH="arm64" ;;
        armv7l) ARCH="arm" ;;
        *) log_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"; exit 1 ;;
    esac
    
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é Helm
    HELM_VERSION=$(curl -s https://api.github.com/repos/helm/helm/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    HELM_URL="https://get.helm.sh/helm-${HELM_VERSION}-${OS}-${ARCH}.tar.gz"
    
    cd /tmp
    curl -fsSL "$HELM_URL" -o helm.tar.gz
    tar -zxf helm.tar.gz
    mv "${OS}-${ARCH}/helm" /usr/local/bin/helm
    chmod +x /usr/local/bin/helm
    rm -rf helm.tar.gz "${OS}-${ARCH}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if command -v helm >/dev/null 2>&1; then
        HELM_VERSION=$(helm version --short 2>/dev/null || helm version --template='{{.Version}}' 2>/dev/null)
        log_success "Helm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $HELM_VERSION"
    else
        log_error "Helm —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
        exit 1
    fi
fi

echo ""

# 5. KUBECTL CONFIGURATION
log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ kubectl..."

if [ -z "${KUBECONFIG:-}" ]; then
    if [ -f "/etc/rancher/k3s/k3s.yaml" ]; then
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        chmod 644 /etc/rancher/k3s/k3s.yaml
        log_success "KUBECONFIG –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $KUBECONFIG"
    else
        log_warning "K3S kubeconfig –Ω–µ –Ω–∞–π–¥–µ–Ω (/etc/rancher/k3s/k3s.yaml)"
        log_warning "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ K3S —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
else
    log_success "KUBECONFIG —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $KUBECONFIG"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∞—Å—Ç–µ—Ä—É
if kubectl get nodes >/dev/null 2>&1; then
    NODE_COUNT=$(kubectl get nodes --no-headers 2>/dev/null | wc -l)
    log_success "kubectl —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–¥: $NODE_COUNT"
else
    log_warning "kubectl –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É"
fi

echo ""

# 6. WORKER NODE LABELING
log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ worker –Ω–æ–¥..."

# –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ worker –Ω–æ–¥—ã
WORKER_NODES=$(kubectl get nodes -l node-role.kubernetes.io/worker=worker -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || true)

if [ -n "$WORKER_NODES" ]; then
    log_success "Worker –Ω–æ–¥—ã –Ω–∞–π–¥–µ–Ω—ã: $WORKER_NODES"
else
    log_warning "Worker –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–¥—ã –∫—Ä–æ–º–µ master
    ALL_NODES=$(kubectl get nodes -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || true)
    MASTER_NODES=$(kubectl get nodes -l node-role.kubernetes.io/master=true -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || true)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ master
    POTENTIAL_WORKERS=""
    for node in $ALL_NODES; do
        if ! echo "$MASTER_NODES" | grep -q "$node"; then
            POTENTIAL_WORKERS="$POTENTIAL_WORKERS $node"
        fi
    done
    
    if [ -n "$POTENTIAL_WORKERS" ]; then
        log_step "–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ worker –Ω–æ–¥—ã: $POTENTIAL_WORKERS"
        
        for node in $POTENTIAL_WORKERS; do
            log_step "–ü—Ä–∏–º–µ–Ω—è–µ–º label worker –∫ $node..."
            if kubectl label nodes "$node" node-role.kubernetes.io/worker=worker --overwrite >/dev/null 2>&1; then
                log_success "Label worker –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ $node"
            else
                log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å label –∫ $node"
            fi
        done
    else
        log_warning "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–¥ –¥–ª—è worker label"
        log_warning "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ master –Ω–æ–¥–∞—Ö"
    fi
fi

echo ""

# 7. STORAGE CLASS FIX
log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ default StorageClass..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ default StorageClass
DEFAULT_SC=$(kubectl get storageclass -o jsonpath='{.items[?(@.metadata.annotations.storageclass\.kubernetes\.io/is-default-class=="true")].metadata.name}' 2>/dev/null || true)

if [ -n "$DEFAULT_SC" ]; then
    log_success "Default StorageClass –Ω–∞–π–¥–µ–Ω: $DEFAULT_SC"
else
    log_warning "Default StorageClass –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ local-path (K3S –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    if kubectl get storageclass local-path >/dev/null 2>&1; then
        log_step "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º local-path –∫–∞–∫ default StorageClass..."
        if kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}' >/dev/null 2>&1; then
            log_success "local-path –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ default"
        else
            log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å default StorageClass"
        fi
    else
        log_warning "StorageClass local-path –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
fi

echo ""

# 8. NETWORK CONNECTIVITY TESTS
log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã
ESSENTIAL_URLS=(
    "https://github.com"
    "https://registry-1.docker.io"
    "https://get.helm.sh"
    "https://raw.githubusercontent.com"
    "https://dl.k8s.io"
)

for url in "${ESSENTIAL_URLS[@]}"; do
    if curl -I -s --connect-timeout 5 "$url" >/dev/null 2>&1; then
        log_success "–î–æ—Å—Ç—É–ø –∫ $(echo $url | cut -d'/' -f3) —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ $(echo $url | cut -d'/' -f3)"
    fi
done

echo ""

# 9. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
log_step "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
check_tool() {
    if command -v "$1" >/dev/null 2>&1; then
        log_success "$1 –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        log_error "$1 –ù–ï –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

SUCCESS=true

check_tool "kubectl" || SUCCESS=false
check_tool "curl" || SUCCESS=false  
check_tool "jq" || SUCCESS=false
check_tool "python3" || SUCCESS=false
check_tool "helm" || SUCCESS=false
check_tool "envsubst" || SUCCESS=false

# Python packages
if python3 -c "import requests, yaml" >/dev/null 2>&1; then
    log_success "Python packages (requests, yaml) –¥–æ—Å—Ç—É–ø–Ω—ã"
else
    log_error "Python packages –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    SUCCESS=false
fi

# Kubernetes access
if kubectl get nodes >/dev/null 2>&1; then
    log_success "kubectl –¥–æ—Å—Ç—É–ø –∫ K8S –∫–ª–∞—Å—Ç–µ—Ä—É"
else
    log_error "kubectl –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É"
    SUCCESS=false
fi

echo ""
echo "==============================================================="

if [ "$SUCCESS" = true ]; then
    log_success "üéâ –í–°–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –£–°–¢–ê–ù–û–í–õ–ï–ù–´ –£–°–ü–ï–®–ù–û!"
    echo ""
    echo -e "${GREEN}üöÄ –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£ ENTERPRISE DEPLOYMENT:${NC}"
    echo ""
    echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: ./scripts/check_dependencies.sh"
    echo "2. –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä: python3 scripts/deploy_all_optimized.py --domain cockpit.work.gd --email artur.komarovv@gmail.com --gpu true"
    echo "3. Enterprise Phase 1: python3 scripts/deploy_enterprise_stack.py --domain cockpit.work.gd --email artur.komarovv@gmail.com --phase 1"
    echo "4. Enterprise Phase 2: python3 scripts/deploy_enterprise_stack.py --domain cockpit.work.gd --email artur.komarovv@gmail.com --phase 2" 
    echo "5. Enterprise Phase 3: python3 scripts/deploy_enterprise_stack.py --domain cockpit.work.gd --email artur.komarovv@gmail.com --phase 3"
    echo ""
    exit 0
else
    log_error "üò® –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–ë–õ–ï–ú–´ –ù–ï –£–î–ê–õ–û–°–¨ –ò–°–ü–†–ê–í–ò–¢–¨"
    echo ""
    echo -e "${YELLOW}üìù –ü–û–ü–†–û–ë–£–ô–¢–ï:${NC}"
    echo "1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç: sudo ./scripts/auto_fix_dependencies.sh"
    echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä—É—á–Ω–æ: ./scripts/check_dependencies.sh"
    echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ firewall –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    echo ""
    exit 1
fi