#!/bin/bash
# Comprehensive dependency checker –¥–ª—è K8S Enterprise deployment
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∞

set -euo pipefail

# Colors –¥–ª—è output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –î–õ–Ø K8S ENTERPRISE DEPLOYMENT${NC}"
echo "=================================================================="
echo ""

MISSING_TOOLS=""
MISSING_PYTHON_PACKAGES=""
CRITICAL_ISSUES=""
WARNINGS=""

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã
check_command() {
    if command -v $1 >/dev/null 2>&1; then
        echo -e "  ${GREEN}‚úÖ $1${NC} $(command -v $1)"
        return 0
    else
        echo -e "  ${RED}‚ùå $1 –ù–ï –ù–ê–ô–î–ï–ù${NC}"
        MISSING_TOOLS="$MISSING_TOOLS $1"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python package
check_python_package() {
    if python3 -c "import $1" >/dev/null 2>&1; then
        echo -e "  ${GREEN}‚úÖ $1${NC}"
        return 0
    else
        echo -e "  ${RED}‚ùå $1${NC}"
        MISSING_PYTHON_PACKAGES="$MISSING_PYTHON_PACKAGES $1"
        return 1
    fi
}

# 1. –°–ò–°–¢–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
echo -e "${BLUE}üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:${NC}"
check_command kubectl
check_command curl
check_command jq
check_command python3
check_command envsubst
check_command helm

echo ""

# 2. PYTHON PACKAGES
echo -e "${BLUE}üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤:${NC}"
check_python_package requests
check_python_package yaml

echo ""

# 3. KUBERNETES ACCESS
echo -e "${BLUE}‚ò∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ K8S:${NC}"
if kubectl get nodes >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ kubectl –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∞—Å—Ç–µ—Ä—É${NC}"
    echo "  üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã:"
    kubectl get nodes -o wide | while read line; do
        echo "    $line"
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ worker –Ω–æ–¥—ã
    WORKER_NODES=$(kubectl get nodes -l node-role.kubernetes.io/worker=worker -o jsonpath='{.items[*].metadata.name}' 2>/dev/null)
    if [ -n "$WORKER_NODES" ]; then
        echo -e "  ${GREEN}‚úÖ Worker –Ω–æ–¥—ã –Ω–∞–π–¥–µ–Ω—ã: $WORKER_NODES${NC}"
        
        # üîß –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ master
        echo -e "\n  ${BLUE}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ master:${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ingress-nginx –Ω–∞ master
        INGRESS_NODE=$(kubectl get pod -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].spec.nodeName}' 2>/dev/null)
        MASTER_NODE=$(kubectl get nodes -l node-role.kubernetes.io/control-plane=true -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
        
        if [ -n "$INGRESS_NODE" ] && [ -n "$MASTER_NODE" ]; then
            if [ "$INGRESS_NODE" = "$MASTER_NODE" ]; then
                echo -e "    ${GREEN}‚úÖ ingress-nginx —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ master: $INGRESS_NODE${NC}"
            else
                echo -e "    ${YELLOW}‚ö†Ô∏è ingress-nginx –Ω–∞ worker: $INGRESS_NODE (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞ master)${NC}"
                WARNINGS="$WARNINGS ingress-placement"
            fi
        elif kubectl get deployment -n ingress-nginx ingress-nginx-controller >/dev/null 2>&1; then
            echo -e "    ${YELLOW}‚ö†Ô∏è ingress-nginx –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω${NC}"
            WARNINGS="$WARNINGS ingress-pending"
        else
            echo -e "    ${BLUE}‚ÑπÔ∏è ingress-nginx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)${NC}"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ cert-manager –Ω–∞ master
        CERTMGR_NODE=$(kubectl get pod -n cert-manager -l app=cert-manager -o jsonpath='{.items[0].spec.nodeName}' 2>/dev/null)
        
        if [ -n "$CERTMGR_NODE" ] && [ -n "$MASTER_NODE" ]; then
            if [ "$CERTMGR_NODE" = "$MASTER_NODE" ]; then
                echo -e "    ${GREEN}‚úÖ cert-manager —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ master: $CERTMGR_NODE${NC}"
            else
                echo -e "    ${YELLOW}‚ö†Ô∏è cert-manager –Ω–∞ worker: $CERTMGR_NODE (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞ master)${NC}"
                WARNINGS="$WARNINGS cert-manager-placement"
            fi
        elif kubectl get deployment -n cert-manager cert-manager >/dev/null 2>&1; then
            echo -e "    ${YELLOW}‚ö†Ô∏è cert-manager –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω${NC}"
            WARNINGS="$WARNINGS cert-manager-pending"
        else
            echo -e "    ${BLUE}‚ÑπÔ∏è cert-manager –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)${NC}"
        fi
        
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è Worker –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç –Ω–∞ master)${NC}"
        WARNINGS="$WARNINGS worker-nodes"
    fi
    
else
    echo -e "  ${RED}‚ùå –ù–ï–¢ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É${NC}"
    echo -e "  ${YELLOW}üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:${NC}"
    echo "    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml"
    echo "    sudo chmod 644 /etc/rancher/k3s/k3s.yaml"
    CRITICAL_ISSUES="$CRITICAL_ISSUES kubectl-access"
fi

echo ""

# 4. STORAGE CLASS
echo -e "${BLUE}üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ Storage:${NC}"
if kubectl get storageclass >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ StorageClass –Ω–∞–π–¥–µ–Ω:${NC}"
    kubectl get storageclass | while read line; do
        echo "    $line"
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ default StorageClass
    DEFAULT_SC=$(kubectl get storageclass -o jsonpath='{.items[?(@.metadata.annotations.storageclass\.kubernetes\.io/is-default-class=="true")].metadata.name}')
    if [ -n "$DEFAULT_SC" ]; then
        echo -e "  ${GREEN}‚úÖ Default StorageClass: $DEFAULT_SC${NC}"
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è Default StorageClass –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        WARNINGS="$WARNINGS default-storage"
    fi
else
    echo -e "  ${RED}‚ùå StorageClass –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    CRITICAL_ISSUES="$CRITICAL_ISSUES storage"
fi

echo ""

# 5. –°–ï–¢–ï–í–û–ô –î–û–°–¢–£–ü
echo -e "${BLUE}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:${NC}"

# –ò–Ω—Ç–µ—Ä–Ω–µ—Ç
if ping -c 1 -W 3 8.8.8.8 >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
else
    echo -e "  ${RED}‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞${NC}"
    CRITICAL_ISSUES="$CRITICAL_ISSUES internet"
fi

# HTTPS –¥–æ—Å—Ç—É–ø
if curl -I -s --connect-timeout 5 https://github.com >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ HTTPS –¥–æ—Å—Ç—É–ø —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "  ${RED}‚ùå HTTPS –ø—Ä–æ–±–ª–µ–º—ã (proxy/firewall?)${NC}"
    CRITICAL_ISSUES="$CRITICAL_ISSUES https"
fi

# Docker Hub
if curl -I -s --connect-timeout 5 https://registry-1.docker.io >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ Docker Hub –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è Docker Hub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    WARNINGS="$WARNINGS docker-hub"
fi

# GitHub (–¥–ª—è ArgoCD/Istio)
if curl -I -s --connect-timeout 5 https://raw.githubusercontent.com >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ GitHub raw content –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è GitHub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    WARNINGS="$WARNINGS github"
fi

echo ""

# 6. –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´
echo -e "${BLUE}üí™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:${NC}"

# –î–∏—Å–∫
echo "  üíΩ –î–∏—Å–∫:"
df -h | head -n 1
DISK_INFO=$(df -h | grep -E "(/$|/var)" | head -n 2)
echo "$DISK_INFO" | while read line; do
    echo "    $line"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (>10GB)
    AVAIL=$(echo $line | awk '{print $4}' | sed 's/[^0-9.]//g')
    if [ ! -z "$AVAIL" ] && [ $(echo "$AVAIL < 10" | bc -l 2>/dev/null || echo 0) -eq 1 ]; then
        echo -e "    ${YELLOW}‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: $AVAIL${NC}"
        WARNINGS="$WARNINGS disk-space"
    fi
done

echo ""
echo "  üß† –ü–∞–º—è—Ç—å:"
free -h
MEMORY_AVAIL=$(free -m | awk 'NR==2{print $7}')
if [ ! -z "$MEMORY_AVAIL" ] && [ "$MEMORY_AVAIL" -lt 1000 ]; then
    echo -e "    ${YELLOW}‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ <1GB –ø–∞–º—è—Ç–∏: ${MEMORY_AVAIL}MB${NC}"
    WARNINGS="$WARNINGS memory"
fi

echo ""

# 7. K8S –ö–û–ú–ü–û–ù–ï–ù–¢–´
echo -e "${BLUE}‚ò∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ K8S –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ cert-manager
if kubectl get crd certificates.cert-manager.io >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ cert-manager CRDs –Ω–∞–π–¥–µ–Ω—ã${NC}"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è cert-manager –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ingress controller
if kubectl get pods -n ingress-nginx >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ ingress-nginx –Ω–∞–π–¥–µ–Ω${NC}"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è ingress-nginx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ metrics-server
if kubectl top nodes >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ metrics-server —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è metrics-server –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏)${NC}"
fi

echo ""

# 8. –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ü–†–û–í–ï–†–ö–ò
echo -e "${BLUE}üéØ –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è enterprise stack:${NC}"

# GPU support –Ω–∞ worker
if kubectl get nodes -o yaml | grep -q "nvidia.com/gpu" 2>/dev/null; then
    echo -e "  ${GREEN}‚úÖ GPU support –Ω–∞–π–¥–µ–Ω –Ω–∞ –Ω–æ–¥–∞—Ö${NC}"
elif [ -n "$WORKER_NODES" ]; then
    echo -e "  ${YELLOW}‚ö†Ô∏è GPU support –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è nvidia-device-plugin)${NC}"
    WARNINGS="$WARNINGS gpu-support"
else
    echo -e "  ${BLUE}‚ÑπÔ∏è GPU –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç worker –Ω–æ–¥)${NC}"
fi

# DNS resolution –¥–ª—è –¥–æ–º–µ–Ω–∞
if nslookup cockpit.work.gd >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ DNS —Ä–µ–∑–æ–ª—é—Ü–∏—è –¥–æ–º–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è DNS –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–º–µ–Ω–æ–º (–º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ cert-manager)${NC}"
    WARNINGS="$WARNINGS dns-domain"
fi

echo ""

# 9. üîß –ù–û–í–û–ï: –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
if [ -n "$WORKER_NODES" ]; then
    echo -e "${BLUE}üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:${NC}"
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ worker
    PROMETHEUS_NODE=$(kubectl get pod -n monitoring -l app=prometheus -o jsonpath='{.items[0].spec.nodeName}' 2>/dev/null)
    if [ -n "$PROMETHEUS_NODE" ]; then
        if echo "$WORKER_NODES" | grep -q "$PROMETHEUS_NODE"; then
            echo -e "    ${GREEN}‚úÖ Prometheus –Ω–∞ worker: $PROMETHEUS_NODE${NC}"
        else
            echo -e "    ${YELLOW}‚ö†Ô∏è Prometheus –Ω–∞ master: $PROMETHEUS_NODE (–ª—É—á—à–µ –Ω–∞ worker)${NC}"
            WARNINGS="$WARNINGS prometheus-placement"
        fi
    else
        echo -e "    ${BLUE}‚ÑπÔ∏è Prometheus –µ—â–µ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç${NC}"
    fi
    
    GRAFANA_NODE=$(kubectl get pod -n monitoring -l app=grafana -o jsonpath='{.items[0].spec.nodeName}' 2>/dev/null)
    if [ -n "$GRAFANA_NODE" ]; then
        if echo "$WORKER_NODES" | grep -q "$GRAFANA_NODE"; then
            echo -e "    ${GREEN}‚úÖ Grafana –Ω–∞ worker: $GRAFANA_NODE${NC}"
        else
            echo -e "    ${YELLOW}‚ö†Ô∏è Grafana –Ω–∞ master: $GRAFANA_NODE (–ª—É—á—à–µ –Ω–∞ worker)${NC}"
            WARNINGS="$WARNINGS grafana-placement"
        fi
    else
        echo -e "    ${BLUE}‚ÑπÔ∏è Grafana –µ—â–µ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç${NC}"
    fi
fi

echo ""

# 10. –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê
echo -e "${BLUE}üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò:${NC}"
echo "================================================"

if [ -n "$CRITICAL_ISSUES" ]; then
    echo -e "${RED}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù–´:${NC}"
    for issue in $CRITICAL_ISSUES; do
        case $issue in
            "kubectl-access")
                echo -e "  üîß ${YELLOW}kubectl –¥–æ—Å—Ç—É–ø:${NC} export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && sudo chmod 644 \$KUBECONFIG"
                ;;
            "internet")
                echo -e "  üîß ${YELLOW}–ò–Ω—Ç–µ—Ä–Ω–µ—Ç:${NC} –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                ;;
            "https")
                echo -e "  üîß ${YELLOW}HTTPS:${NC} –ø—Ä–æ–≤–µ—Ä—å—Ç–µ proxy settings –∏–ª–∏ firewall"
                ;;
            "storage")
                echo -e "  üîß ${YELLOW}Storage:${NC} K3S –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å local-path provisioner –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                ;;
        esac
    done
    echo ""
fi

if [ -n "$MISSING_TOOLS" ]; then
    echo -e "${RED}‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:${NC}$MISSING_TOOLS"
    echo ""
    echo -e "${YELLOW}üì¶ –ö–û–ú–ê–ù–î–´ –£–°–¢–ê–ù–û–í–ö–ò:${NC}"
    echo "sudo apt-get update"
    echo "sudo apt-get install -y curl jq python3 python3-yaml python3-requests gettext-base"
    echo "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash"
    echo ""
fi

if [ -n "$MISSING_PYTHON_PACKAGES" ]; then
    echo -e "${RED}‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ PYTHON –ü–ê–ö–ï–¢–´:${NC}$MISSING_PYTHON_PACKAGES"
    echo "pip3 install requests pyyaml"
    echo "# –∏–ª–∏: sudo apt-get install -y python3-requests python3-yaml"
    echo ""
fi

if [ -n "$WARNINGS" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):${NC}"
    for warning in $WARNINGS; do
        case $warning in
            "worker-nodes")
                echo "  ‚Ä¢ Worker –Ω–æ–¥—ã: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ master"
                ;;
            "gpu-support")
                echo "  ‚Ä¢ GPU: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ nvidia-device-plugin –µ—Å–ª–∏ –Ω—É–∂–µ–Ω GPU monitoring"
                ;;
            "dns-domain")
                echo "  ‚Ä¢ DNS –¥–æ–º–µ–Ω–∞: –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
                ;;
            "memory")
                echo "  ‚Ä¢ –ü–∞–º—è—Ç—å: —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É resource limits"
                ;;
            "disk-space")
                echo "  ‚Ä¢ –î–∏—Å–∫: –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ retention policies"
                ;;
            "ingress-placement")
                echo -e "  ‚Ä¢ ${YELLOW}ingress-nginx –Ω–∞ worker:${NC} –ª—É—á—à–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ master (10 Gbps VPS)"
                echo "    üîß Auto-fix: kubectl patch deployment ingress-nginx-controller -n ingress-nginx --patch '"
                echo '        {"spec":{"template":{"spec":{"nodeSelector":{"node-role.kubernetes.io/control-plane":"true"},"tolerations":[{"key":"node-role.kubernetes.io/control-plane","operator":"Exists","effect":"NoSchedule"}]}}}}'
                echo "    üîß –ò –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç: kubectl rollout restart deployment/ingress-nginx-controller -n ingress-nginx"
                ;;
            "cert-manager-placement")
                echo -e "  ‚Ä¢ ${YELLOW}cert-manager –Ω–∞ worker:${NC} –ª—É—á—à–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ master (TLS endpoint)"
                echo "    üîß Auto-fix:"
                echo "    for deploy in cert-manager cert-manager-cainjector cert-manager-webhook; do"
                echo "      kubectl patch deployment \$deploy -n cert-manager --patch '"
                echo '        {"spec":{"template":{"spec":{"nodeSelector":{"node-role.kubernetes.io/control-plane":"true"},"tolerations":[{"key":"node-role.kubernetes.io/control-plane","operator":"Exists","effect":"NoSchedule"}]}}}}'
                echo "    done"
                ;;
            "prometheus-placement")
                echo -e "  ‚Ä¢ ${YELLOW}Prometheus –Ω–∞ master:${NC} –ª—É—á—à–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ worker (–±–æ–ª—å—à–µ —Ä–∞–º)"
                echo "    üîß –ü–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ: python3 scripts/deploy_all_optimized.py —Å worker –Ω–æ–¥–æ–π"
                ;;
            "grafana-placement")
                echo -e "  ‚Ä¢ ${YELLOW}Grafana –Ω–∞ master:${NC} –ª—É—á—à–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ worker (–≤–∏–∑—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"
                echo "    üîß –ü–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ: python3 scripts/deploy_all_optimized.py —Å worker –Ω–æ–¥–æ–π"
                ;;
        esac
    done
    echo ""
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
if [ -z "$CRITICAL_ISSUES" ] && [ -z "$MISSING_TOOLS" ] && [ -z "$MISSING_PYTHON_PACKAGES" ]; then
    echo -e "${GREEN}üéâ –í–°–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –ù–ê–ô–î–ï–ù–´ - –ì–û–¢–û–í –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ!${NC}"
    echo ""
    echo -e "${GREEN}üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
    echo "  1. –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä: python3 scripts/deploy_all_optimized.py --domain cockpit.work.gd --email artur.komarovv@gmail.com --gpu true"
    echo "  2. Enterprise Phase 1: python3 scripts/deploy_enterprise_stack.py --domain cockpit.work.gd --email artur.komarovv@gmail.com --phase 1"
    echo "  3. Enterprise Phase 2: python3 scripts/deploy_enterprise_stack.py --domain cockpit.work.gd --email artur.komarovv@gmail.com --phase 2"
    echo "  4. Enterprise Phase 3: python3 scripts/deploy_enterprise_stack.py --domain cockpit.work.gd --email artur.komarovv@gmail.com --phase 3"
    
    # üîß –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–µ—Ç–∏
    if [ -n "$WORKER_NODES" ]; then
        echo ""
        echo -e "${BLUE}üì° –°–ï–¢–ï–í–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:${NC}"
        echo "  üñ•Ô∏è Master VPS: 10 Gbps (1.25 –ì–ë/—Å) - —Å–µ—Ç–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
        echo "  üè† Worker PC: —Å–≤—è–∑—å —Å VPS ~10 –ú–ë/—Å (Tailscale), –∏–Ω—Ç–µ—Ä–Ω–µ—Ç 100 –ú–±–∏—Ç/—Å"
        echo "  ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: —Å–µ—Ç—å –Ω–∞ VPS, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ worker"
    fi
    
    exit 0
else
    echo -e "${RED}‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ - –ò–°–ü–†–ê–í–¨–¢–ï –ü–ï–†–ï–î –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï–ú${NC}"
    echo ""
    echo -e "${YELLOW}üìù QUICK FIX –ö–û–ú–ê–ù–î–´:${NC}"
    echo "# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π:"
    echo "sudo apt-get update && sudo apt-get install -y curl jq python3 python3-yaml python3-requests gettext-base"
    echo "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash"
    echo "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && sudo chmod 644 /etc/rancher/k3s/k3s.yaml"
    echo ""
    echo "# –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞:"
    echo "./scripts/check_dependencies.sh"
    
    # üîß –ù–û–í–û–ï: Auto-fix –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if echo "$WARNINGS" | grep -q "ingress-placement\|cert-manager-placement"; then
        echo ""
        echo -e "${YELLOW}üîß AUTO-FIX –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:${NC}"
        
        if echo "$WARNINGS" | grep -q "ingress-placement"; then
            echo "# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ingress-nginx –Ω–∞ master (10 Gbps VPS):"
            echo 'kubectl patch deployment ingress-nginx-controller -n ingress-nginx --patch \''
            echo '  \047{"spec":{"template":{"spec":{"nodeSelector":{"node-role.kubernetes.io/control-plane":"true"},"tolerations":[{"key":"node-role.kubernetes.io/control-plane","operator":"Exists","effect":"NoSchedule"}]}}}}\047'
            echo "kubectl rollout restart deployment/ingress-nginx-controller -n ingress-nginx"
            echo ""
        fi
        
        if echo "$WARNINGS" | grep -q "cert-manager-placement"; then
            echo "# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ cert-manager –Ω–∞ master (TLS endpoint):"
            echo "for deploy in cert-manager cert-manager-cainjector cert-manager-webhook; do"
            echo '  kubectl patch deployment $deploy -n cert-manager --patch \''
            echo '    \047{"spec":{"template":{"spec":{"nodeSelector":{"node-role.kubernetes.io/control-plane":"true"},"tolerations":[{"key":"node-role.kubernetes.io/control-plane","operator":"Exists","effect":"NoSchedule"}]}}}}\047'
            echo "done"
            echo ""
        fi
    fi
    
    exit 1
fi