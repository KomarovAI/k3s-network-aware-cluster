#!/usr/bin/env python3
"""
üöÄ ENTERPRISE-GRADE KUBERNETES STACK DEPLOYER üöÄ

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
–±–∞–∑–æ–≤–æ–≥–æ K3S –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤ enterprise-grade –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —É—Ä–æ–≤–Ω—è Netflix/Google.

PHASE 1 (–ö–†–ò–¢–ò–ß–ù–û):
- ELK Stack - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ —Å –ø–æ–∏—Å–∫–æ–º
- KEDA - event-driven auto-scaling
- Advanced monitoring enhancements

PHASE 2 (–í–ê–ñ–ù–û):
- ArgoCD GitOps - git push ‚Üí auto deploy
- Istio Service Mesh - advanced traffic management
- Advanced security policies

PHASE 3 (–ñ–ï–õ–ê–¢–ï–õ–¨–ù–û):
- Jaeger Distributed Tracing
- OPA Policy Engine + Falco Security
- Advanced storage layer

Usage:
  python3 scripts/deploy_enterprise_stack.py --domain cockpit.work.gd --email artur.komarovv@gmail.com --phase 1
  python3 scripts/deploy_enterprise_stack.py --domain cockpit.work.gd --email artur.komarovv@gmail.com --phase all --confirm
"""

import argparse
import asyncio
import json
import os
import subprocess
import sys
import time
import yaml
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any

class EnterpriseStackDeployer:
    def __init__(self, domain: str, email: str, phase: str, confirm: bool = False):
        self.domain = domain
        self.email = email
        self.phase = phase
        self.confirm = confirm
        self.worker_nodes = []
        
        # Tracking deployed components
        self.deployed_components = []
        self.failed_components = []
        
    def log_info(self, msg: str):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] ‚ÑπÔ∏è  {msg}")
    
    def log_success(self, msg: str):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] ‚úÖ {msg}")
    
    def log_error(self, msg: str):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] ‚ùå {msg}")
    
    def log_warning(self, msg: str):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] ‚ö†Ô∏è  {msg}")

    def run_kubectl(self, cmd: str, capture_output=True, check=True) -> subprocess.CompletedProcess:
        """kubectl —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        full_cmd = f"kubectl {cmd}"
        if not capture_output:
            print(f"$ {full_cmd}")
        return subprocess.run(full_cmd, shell=True, capture_output=capture_output, text=True, check=check)

    def wait_for_condition(self, cmd: str, success_msg: str, timeout: int = 300) -> bool:
        """–£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å progress indicator"""
        self.log_info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {success_msg}")
        start_time = time.time()
        attempts = 0
        
        while time.time() - start_time < timeout:
            try:
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                if result.returncode == 0:
                    self.log_success(success_msg)
                    return True
            except Exception:
                pass
            
            attempts += 1
            elapsed = int(time.time() - start_time)
            if attempts % 6 == 0:  # Progress update every 30s
                self.log_info(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ... ({elapsed}/{timeout}s)")
            
            wait_time = min(5.0 * (1.2 ** (attempts // 3)), 15)
            time.sleep(wait_time)
        
        self.log_error(f"‚ùå –¢–∞–π–º–∞—É—Ç ({timeout}s): {success_msg}")
        return False

    def check_prerequisites(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        self.log_info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...")
        
        # 1. –ö–ª–∞—Å—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            result = self.run_kubectl("get nodes", timeout=10)
            if result.returncode != 0:
                self.log_error("–ö–ª–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        except subprocess.TimeoutExpired:
            self.log_error("–ö–ª–∞—Å—Ç–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return False
        
        # 2. Worker –Ω–æ–¥—ã –Ω–∞–π–¥–µ–Ω—ã
        try:
            result = self.run_kubectl("get nodes -l node-role.kubernetes.io/worker=worker -o jsonpath='{.items[*].metadata.name}'")
            worker_nodes = result.stdout.strip().split()
            
            if worker_nodes and worker_nodes[0]:
                self.worker_nodes = [node for node in worker_nodes if node]
                self.log_success(f"–ù–∞–π–¥–µ–Ω—ã worker –Ω–æ–¥—ã: {', '.join(self.worker_nodes)}")
            else:
                self.log_warning("Worker –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ master")
                
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è worker –Ω–æ–¥: {e}")
            return False
        
        # 3. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤
        if self.worker_nodes:
            self.log_success("‚úÖ Worker –Ω–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –º–æ—â–Ω–æ–º –∂–µ–ª–µ–∑–µ")
        else:
            if not self.confirm:
                self.log_warning("‚ö†Ô∏è  –ë–µ–∑ worker –Ω–æ–¥—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å master")
                response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
                if response.lower() != 'y':
                    return False
        
        return True

    def show_deployment_plan(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print("\n" + "="*80)
        print("üöÄ –ü–õ–ê–ù –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø ENTERPRISE STACK")
        print("="*80)
        
        phases = {
            "1": {
                "name": "PHASE 1 - –ö–†–ò–¢–ò–ß–ù–û (30-45 –º–∏–Ω)",
                "memory": "3.5 GB",
                "components": [
                    "ELK Stack (3GB) - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ + –ø–æ–∏—Å–∫ + Kibana UI",
                    "KEDA (500MB) - event-driven auto-scaling",
                    "Enhanced monitoring - —É–ª—É—á—à–µ–Ω–Ω—ã–π Prometheus/Grafana"
                ]
            },
            "2": {
                "name": "PHASE 2 - –í–ê–ñ–ù–û (60-90 –º–∏–Ω)",
                "memory": "3 GB", 
                "components": [
                    "ArgoCD GitOps (1GB) - git push ‚Üí auto deploy",
                    "Istio Service Mesh (2GB) - advanced traffic management + mTLS",
                    "Advanced ingress policies"
                ]
            },
            "3": {
                "name": "PHASE 3 - –ñ–ï–õ–ê–¢–ï–õ–¨–ù–û (45-60 –º–∏–Ω)",
                "memory": "1.8 GB",
                "components": [
                    "Jaeger Distributed Tracing (800MB) - request flow visualization", 
                    "OPA Gatekeeper (500MB) - policy enforcement",
                    "Falco Runtime Security (500MB) - runtime anomaly detection"
                ]
            }
        }
        
        if self.phase == "all":
            for phase_num, phase_data in phases.items():
                print(f"\nüìã {phase_data['name']}")
                print(f"   üíæ Memory: {phase_data['memory']}")
                for component in phase_data['components']:
                    print(f"   ‚Ä¢ {component}")
            
            total_memory = 8.3
            print(f"\nüìä –ò–¢–û–ì–û:")
            print(f"   ‚Ä¢ –ü–∞–º—è—Ç—å: ~{total_memory} GB")
            print(f"   ‚Ä¢ –í—Ä–µ–º—è: ~3-4 —á–∞—Å–∞")
            if self.worker_nodes:
                print(f"   ‚Ä¢ Utilization: ~13% –æ—Ç 64GB worker RAM")
            
        elif self.phase in phases:
            phase_data = phases[self.phase]
            print(f"\nüìã {phase_data['name']}")
            print(f"   üíæ Memory: {phase_data['memory']}")
            for component in phase_data['components']:
                print(f"   ‚Ä¢ {component}")
        
        print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
        results = [
            "üöÄ Centralized logging —Å –º–æ—â–Ω—ã–º –ø–æ–∏—Å–∫–æ–º (ELK)",
            "üöÄ Event-driven auto-scaling —Å–µ—Ä–≤–∏—Å–æ–≤ (KEDA)",
            "üöÄ Git-based deployments (ArgoCD)",
            "üöÄ Advanced traffic management (Istio)",
            "üöÄ Request tracing –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏ (Jaeger)",
            "üöÄ Automated policy enforcement (OPA)",
            "üöÄ Runtime security monitoring (Falco)"
        ]
        
        for result in results:
            print(f"   {result}")
        
        print("="*80)

    # PHASE 1 Components

    def deploy_elk_stack(self) -> bool:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ELK Stack –Ω–∞ worker"""
        self.log_info("üîç –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ELK Stack...")
        
        try:
            elk_cmd = [
                "python3", "scripts/deploy_elk_on_worker.py",
                "--domain", self.domain,
                "--retention-days", "15"
            ]
            
            result = subprocess.run(elk_cmd, capture_output=False, text=True, timeout=1200)  # 20 min timeout
            
            if result.returncode == 0:
                self.log_success("ELK Stack —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç —É—Å–ø–µ—à–Ω–æ")
                self.deployed_components.append("ELK Stack")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                if self.wait_for_condition(
                    f"curl -k -s https://kibana.{self.domain} | grep -q kibana",
                    "Kibana UI –¥–æ—Å—Ç—É–ø–Ω–∞",
                    timeout=180
                ):
                    self.log_success(f"üéâ Kibana –¥–æ—Å—Ç—É–ø–Ω–∞: https://kibana.{self.domain}")
                
                return True
            else:
                self.log_error("–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ELK Stack")
                self.failed_components.append("ELK Stack")
                return False
                
        except subprocess.TimeoutExpired:
            self.log_error("–¢–∞–π–º–∞—É—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ELK Stack (20 –º–∏–Ω)")
            self.failed_components.append("ELK Stack")
            return False
        except Exception as e:
            self.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ELK: {e}")
            self.failed_components.append("ELK Stack")
            return False

    def deploy_keda_autoscaling(self) -> bool:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ KEDA –¥–ª—è event-driven scaling"""
        self.log_info("‚ö° –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ KEDA Auto-scaling...")
        
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ KEDA —á–µ—Ä–µ–∑ Helm
            helm_commands = [
                ["helm", "repo", "add", "kedacore", "https://kedacore.github.io/charts"],
                ["helm", "repo", "update"],
                ["kubectl", "create", "namespace", "keda-system", "--dry-run=client", "-o", "yaml"]
            ]
            
            for cmd in helm_commands:
                subprocess.run(cmd, capture_output=True, check=True)
            
            # –°–æ–∑–¥–∞–µ–º namespace
            subprocess.run(["kubectl", "apply", "-f", "-"], 
                          input=subprocess.run(["kubectl", "create", "namespace", "keda-system", "--dry-run=client", "-o", "yaml"], 
                                              capture_output=True, text=True).stdout, text=True)
            
            # –°–æ–∑–¥–∞–µ–º values –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ worker
            keda_values = f"""
# –†–∞–∑–º–µ—â–µ–Ω–∏–µ KEDA –Ω–∞ worker
nodeSelector:
  node-role.kubernetes.io/worker: worker

# –†–µ—Å—É—Ä—Å—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è worker
operator:
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 1Gi

metricsServer:
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 1Gi

webhooks:
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 1Gi
"""
            
            with open("/tmp/keda-values.yaml", "w") as f:
                f.write(keda_values)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ KEDA
            result = subprocess.run([
                "helm", "upgrade", "--install", "keda", "kedacore/keda",
                "-n", "keda-system", "-f", "/tmp/keda-values.yaml",
                "--timeout", "10m"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                if self.wait_for_condition(
                    "kubectl -n keda-system rollout status deployment/keda-operator --timeout=300s",
                    "KEDA Operator –≥–æ—Ç–æ–≤"
                ):
                    self.log_success("KEDA Auto-scaling —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç")
                    self.deployed_components.append("KEDA")
                    return True
            
            self.log_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ KEDA: {result.stderr}")
            self.failed_components.append("KEDA")
            return False
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è KEDA: {e}")
            self.failed_components.append("KEDA")
            return False

    def enhance_monitoring_stack(self) -> bool:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.log_info("üìà –£–ª—É—á—à–µ–Ω–∏–µ monitoring stack...")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º ServiceMonitors –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            enhanced_monitoring = f"""
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: keda-metrics
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: keda-operator-metrics-apiserver
  endpoints:
  - port: https
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: elasticsearch-metrics
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: elasticsearch
  endpoints:
  - port: http
    interval: 30s
    path: /_prometheus/metrics
---
# Grafana Dashboard ConfigMap for KEDA
apiVersion: v1
kind: ConfigMap
metadata:
  name: keda-dashboard
  namespace: monitoring
  labels:
    grafana_dashboard: "1"
data:
  keda-dashboard.json: |
    {{
      "dashboard": {{
        "title": "KEDA Scaling Dashboard",
        "panels": [
          {{
            "title": "Scaled Objects",
            "type": "stat",
            "targets": [
              {{
                "expr": "keda_scaledobject_total",
                "legendFormat": "Total Scaled Objects"
              }}
            ]
          }},
          {{
            "title": "HPA Metrics",
            "type": "graph", 
            "targets": [
              {{
                "expr": "keda_scaler_metrics_value",
                "legendFormat": "{{{{ scaler_name }}}}"
              }}
            ]
          }}
        ]
      }}
    }}
"""
            
            with open("/tmp/enhanced-monitoring.yaml", "w") as f:
                f.write(enhanced_monitoring)
            
            result = self.run_kubectl("apply -f /tmp/enhanced-monitoring.yaml", capture_output=False, check=False)
            
            if result.returncode == 0:
                self.log_success("Monitoring enhancements –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                self.deployed_components.append("Enhanced Monitoring")
                return True
            else:
                self.log_warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ monitoring enhancements –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, Prometheus Operator –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
                return True  # Non-critical
                
        except Exception as e:
            self.log_warning(f"–ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ monitoring enhancements: {e}")
            return True  # Non-critical

    # PHASE 2 Components

    def deploy_argocd_gitops(self) -> bool:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ArgoCD –¥–ª—è GitOps"""
        self.log_info("üîÑ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ArgoCD GitOps...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º namespace
            subprocess.run(["kubectl", "create", "namespace", "argocd", "--dry-run=client", "-o", "yaml"], 
                          stdout=subprocess.PIPE)
            subprocess.run(["kubectl", "apply", "-f", "-"], 
                          input=subprocess.run(["kubectl", "create", "namespace", "argocd", "--dry-run=client", "-o", "yaml"], 
                                              capture_output=True, text=True).stdout, text=True)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ArgoCD
            result = subprocess.run([
                "kubectl", "apply", "-n", "argocd", "-f",
                "https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
            ], capture_output=True, text=True)
            
            if result.returncode != 0:
                self.log_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ArgoCD: {result.stderr}")
                self.failed_components.append("ArgoCD")
                return False
            
            # –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞ worker
            if self.worker_nodes:
                argocd_patch = {
                    "spec": {
                        "template": {
                            "spec": {
                                "nodeSelector": {
                                    "node-role.kubernetes.io/worker": "worker"
                                }
                            }
                        }
                    }
                }
                
                argocd_deployments = [
                    "argocd-applicationset-controller",
                    "argocd-dex-server", 
                    "argocd-notifications-controller",
                    "argocd-redis",
                    "argocd-repo-server",
                    "argocd-server"
                ]
                
                for deployment in argocd_deployments:
                    self.run_kubectl(f"patch deployment {deployment} -n argocd --patch '{json.dumps(argocd_patch)}'", check=False)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            if self.wait_for_condition(
                "kubectl -n argocd rollout status deployment/argocd-server --timeout=300s",
                "ArgoCD Server –≥–æ—Ç–æ–≤"
            ):
                # –°–æ–∑–¥–∞–µ–º Ingress –¥–ª—è ArgoCD
                argocd_ingress = f"""
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-server
  namespace: argocd
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - argocd.{self.domain}
    secretName: argocd-tls
  rules:
  - host: argocd.{self.domain}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: argocd-server
            port:
              number: 443
"""
                
                with open("/tmp/argocd-ingress.yaml", "w") as f:
                    f.write(argocd_ingress)
                
                self.run_kubectl("apply -f /tmp/argocd-ingress.yaml", capture_output=False)
                
                # –ü–æ–ª—É—á–∞–µ–º initial admin password
                try:
                    admin_secret = self.run_kubectl("get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}'")
                    if admin_secret.returncode == 0:
                        import base64
                        admin_password = base64.b64decode(admin_secret.stdout).decode('utf-8')
                        self.log_success(f"üéâ ArgoCD –¥–æ—Å—Ç—É–ø–µ–Ω: https://argocd.{self.domain}")
                        self.log_success(f"üîê Admin password: {admin_password}")
                except:
                    self.log_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å admin password, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é")
                
                self.deployed_components.append("ArgoCD GitOps")
                return True
            
            self.failed_components.append("ArgoCD")
            return False
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ArgoCD: {e}")
            self.failed_components.append("ArgoCD")
            return False

    def deploy_istio_service_mesh(self) -> bool:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Istio Service Mesh"""
        self.log_info("üåê –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Istio Service Mesh...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º Istio
            istio_download = """
curl -L https://istio.io/downloadIstio | sh -
export PATH=$PWD/istio-*/bin:$PATH
"""
            subprocess.run(istio_download, shell=True, check=True)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Istio —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è worker
            istio_config = f"""
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: control-plane
spec:
  values:
    pilot:
      env:
        EXTERNAL_ISTIOD: false
  components:
    pilot:
      k8s:
        nodeSelector:
          node-role.kubernetes.io/worker: worker
        resources:
          requests:
            cpu: 500m
            memory: 2048Mi
          limits:
            cpu: 2000m
            memory: 4096Mi
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        nodeSelector:
          node-role.kubernetes.io/worker: worker
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 2000m
            memory: 1024Mi
"""
            
            with open("/tmp/istio-config.yaml", "w") as f:
                f.write(istio_config)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Istio
            subprocess.run(["istioctl", "install", "--set", "values.defaultRevision=default", "-f", "/tmp/istio-config.yaml", "-y"], 
                          check=True, timeout=600)
            
            # –í–∫–ª—é—á–∞–µ–º sidecar injection –¥–ª—è default namespace
            self.run_kubectl("label namespace default istio-injection=enabled --overwrite")
            
            if self.wait_for_condition(
                "kubectl -n istio-system rollout status deployment/istiod --timeout=300s",
                "Istio Control Plane –≥–æ—Ç–æ–≤"
            ):
                self.log_success("Istio Service Mesh —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç")
                self.deployed_components.append("Istio Service Mesh")
                return True
            
            self.failed_components.append("Istio")
            return False
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Istio: {e}")
            self.failed_components.append("Istio")
            return False

    # PHASE 3 Components
    
    def deploy_jaeger_tracing(self) -> bool:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Jaeger –¥–ª—è distributed tracing"""
        self.log_info("üîç –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Jaeger Tracing...")
        
        try:
            # Jaeger All-in-One –Ω–∞ worker
            jaeger_manifest = f"""
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: istio-system
  labels:
    app: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
    spec:
      nodeSelector:
        node-role.kubernetes.io/worker: "worker"
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:1.50
        env:
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: SPAN_STORAGE_TYPE
          value: "memory"
        resources:
          requests:
            cpu: 200m
            memory: 384Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        ports:
        - containerPort: 16686
        - containerPort: 14268
        - containerPort: 6831
          protocol: UDP
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: istio-system
spec:
  selector:
    app: jaeger
  ports:
  - port: 16686
    targetPort: 16686
    name: ui
  - port: 14268
    targetPort: 14268
    name: http
  - port: 6831
    targetPort: 6831
    name: udp
    protocol: UDP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jaeger
  namespace: istio-system
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - jaeger.{self.domain}
    secretName: jaeger-tls
  rules:
  - host: jaeger.{self.domain}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jaeger
            port:
              number: 16686
"""
            
            with open("/tmp/jaeger.yaml", "w") as f:
                f.write(jaeger_manifest)
            
            self.run_kubectl("apply -f /tmp/jaeger.yaml", capture_output=False)
            
            if self.wait_for_condition(
                "kubectl -n istio-system rollout status deployment/jaeger --timeout=180s",
                "Jaeger –≥–æ—Ç–æ–≤"
            ):
                self.log_success(f"üéâ Jaeger UI: https://jaeger.{self.domain}")
                self.deployed_components.append("Jaeger Tracing")
                return True
            
            self.failed_components.append("Jaeger")
            return False
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Jaeger: {e}")
            self.failed_components.append("Jaeger")
            return False

    def deploy_security_stack(self) -> bool:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ OPA + Falco"""
        self.log_info("üõ°Ô∏è  –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Security Stack...")
        
        success = True
        
        # OPA Gatekeeper
        try:
            self.log_info("üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ OPA Gatekeeper...")
            subprocess.run([
                "kubectl", "apply", "-f",
                "https://raw.githubusercontent.com/open-policy-agent/gatekeeper/release-3.14/deploy/gatekeeper.yaml"
            ], check=True, timeout=300)
            
            if self.wait_for_condition(
                "kubectl -n gatekeeper-system rollout status deployment/gatekeeper-controller-manager --timeout=180s",
                "OPA Gatekeeper –≥–æ—Ç–æ–≤"
            ):
                self.log_success("OPA Gatekeeper —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç")
                self.deployed_components.append("OPA Gatekeeper")
            else:
                success = False
                self.failed_components.append("OPA Gatekeeper")
                
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ OPA Gatekeeper: {e}")
            self.failed_components.append("OPA Gatekeeper")
            success = False
        
        # Falco
        try:
            self.log_info("üõ°Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Falco...")
            helm_commands = [
                ["helm", "repo", "add", "falcosecurity", "https://falcosecurity.github.io/charts"],
                ["helm", "repo", "update"]
            ]
            
            for cmd in helm_commands:
                subprocess.run(cmd, capture_output=True, check=True)
            
            falco_values = f"""
nodeSelector:
  node-role.kubernetes.io/worker: worker

resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 1000m
    memory: 512Mi

falco:
  grpc:
    enabled: true
  grpcOutput:
    enabled: true
"""
            
            with open("/tmp/falco-values.yaml", "w") as f:
                f.write(falco_values)
            
            subprocess.run([
                "helm", "upgrade", "--install", "falco", "falcosecurity/falco",
                "-n", "falco-system", "--create-namespace", "-f", "/tmp/falco-values.yaml",
                "--timeout", "10m"
            ], check=True)
            
            if self.wait_for_condition(
                "kubectl -n falco-system rollout status daemonset/falco --timeout=180s",
                "Falco –≥–æ—Ç–æ–≤"
            ):
                self.log_success("Falco Security —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç")
                self.deployed_components.append("Falco Security")
            else:
                success = False
                self.failed_components.append("Falco")
                
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ Falco: {e}")
            self.failed_components.append("Falco")
            success = False
        
        return success

    def run_phase(self, phase_number: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–∞–∑—ã"""
        phase_success = True
        
        if phase_number == "1":
            self.log_info("üöÄ PHASE 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
            
            if not self.deploy_elk_stack():
                phase_success = False
                
            if not self.deploy_keda_autoscaling():
                phase_success = False
                
            if not self.enhance_monitoring_stack():
                phase_success = False
                
        elif phase_number == "2":
            self.log_info("üöÄ PHASE 2: GitOps + Service Mesh")
            
            if not self.deploy_argocd_gitops():
                phase_success = False
                
            if not self.deploy_istio_service_mesh():
                phase_success = False
                
        elif phase_number == "3":
            self.log_info("üöÄ PHASE 3: Tracing + Security")
            
            if not self.deploy_jaeger_tracing():
                phase_success = False
                
            if not self.deploy_security_stack():
                phase_success = False
        
        return phase_success

    def run_full_deployment(self) -> bool:
        """–ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
        print("\n" + "üöÄ" * 40)
        print("üöÄ –ó–ê–ü–£–°–ö ENTERPRISE STACK DEPLOYMENT üöÄ")
        print("üöÄ" * 40)
        
        start_time = time.time()
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            if not self.check_prerequisites():
                return False
            
            # 2. –ü–æ–∫–∞–∑ –ø–ª–∞–Ω–∞
            self.show_deployment_plan()
            
            # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if not self.confirm:
                print(f"\n‚ö†Ô∏è  –ë—É–¥–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –º–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ {'worker' if self.worker_nodes else 'master'}!")
                response = input("ü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ? (y/N): ")
                if response.lower() != 'y':
                    self.log_info("–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    return False
            
            # 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–∑
            phases_to_run = ["1", "2", "3"] if self.phase == "all" else [self.phase]
            overall_success = True
            
            for phase_num in phases_to_run:
                print(f"\n{'='*60}")
                phase_start = time.time()
                
                if self.run_phase(phase_num):
                    phase_time = time.time() - phase_start
                    self.log_success(f"‚úÖ PHASE {phase_num} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ({phase_time:.1f}s)")
                else:
                    phase_time = time.time() - phase_start
                    self.log_error(f"‚ùå PHASE {phase_num} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏ ({phase_time:.1f}s)")
                    overall_success = False
                    
                    if not self.confirm:
                        response = input(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å PHASE {int(phase_num)+1}? (y/N): ")
                        if response.lower() != 'y':
                            break
            
            # 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            total_time = time.time() - start_time
            self.show_final_report(total_time)
            
            return overall_success
            
        except KeyboardInterrupt:
            self.log_warning("–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            self.log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    def show_final_report(self, total_time: float):
        """–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
        print("\n" + "="*80)
        print("üéâ –û–¢–ß–ï–¢ –û –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ò ENTERPRISE STACK")
        print("="*80)
        
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω—É—Ç")
        print(f"üìä –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(self.deployed_components)}")
        if self.failed_components:
            print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(self.failed_components)}")
        
        print(f"\n‚úÖ –£–°–ü–ï–®–ù–û –†–ê–ó–í–ï–†–ù–£–¢–û:")
        for component in self.deployed_components:
            print(f"   ‚Ä¢ {component}")
        
        if self.failed_components:
            print(f"\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
            for component in self.failed_components:
                print(f"   ‚Ä¢ {component}")
        
        print(f"\nüåê –î–û–°–¢–£–ü–ù–´–ï –°–ï–†–í–ò–°–´:")
        services = [
            ("Grafana", f"https://grafana.{self.domain}"),
            ("Kubevious", f"https://kubevious.{self.domain}")
        ]
        
        if "ELK Stack" in self.deployed_components:
            services.append(("Kibana (Logs)", f"https://kibana.{self.domain}"))
        if "ArgoCD GitOps" in self.deployed_components:
            services.append(("ArgoCD", f"https://argocd.{self.domain}"))
        if "Jaeger Tracing" in self.deployed_components:
            services.append(("Jaeger", f"https://jaeger.{self.domain}"))
        
        for service_name, service_url in services:
            print(f"   ‚Ä¢ {service_name:<15}: {service_url}")
        
        print(f"\nüöÄ –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
        if "ELK Stack" in self.deployed_components:
            print("   üîç Centralized logging —Å –º–æ—â–Ω—ã–º –ø–æ–∏—Å–∫–æ–º")
        if "KEDA" in self.deployed_components:
            print("   ‚ö° Event-driven auto-scaling")
        if "ArgoCD GitOps" in self.deployed_components:
            print("   üîÑ Git-based deployments (git push ‚Üí auto deploy)")
        if "Istio Service Mesh" in self.deployed_components:
            print("   üåê Advanced traffic management + mTLS")
        if "Jaeger Tracing" in self.deployed_components:
            print("   üîç Distributed request tracing")
        if "OPA Gatekeeper" in self.deployed_components:
            print("   üõ°Ô∏è  Automated policy enforcement")
        if "Falco Security" in self.deployed_components:
            print("   üõ°Ô∏è  Runtime security monitoring")
        
        print("\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º URL")
        print("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GitOps —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ ArgoCD")
        print("   3. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–µ KEDA ScaledObjects –¥–ª—è –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   4. –ò–∑—É—á–∏—Ç–µ –ª–æ–≥–∏ –≤ Kibana –∏ —Ç—Ä–µ–π—Å—ã –≤ Jaeger")
        
        print("="*80)

def main():
    parser = argparse.ArgumentParser(description="Enterprise Stack Deployer")
    parser.add_argument("--domain", required=True, help="–ë–∞–∑–æ–≤—ã–π –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, cockpit.work.gd)")
    parser.add_argument("--email", required=True, help="Email –¥–ª—è Let's Encrypt")
    parser.add_argument("--phase", choices=["1", "2", "3", "all"], default="1", 
                        help="–§–∞–∑–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (1=–∫—Ä–∏—Ç–∏—á–Ω–æ, 2=–≤–∞–∂–Ω–æ, 3=–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, all=–≤—Å–µ)")
    parser.add_argument("--confirm", action="store_true", 
                        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    
    args = parser.parse_args()
    
    deployer = EnterpriseStackDeployer(
        domain=args.domain,
        email=args.email, 
        phase=args.phase,
        confirm=args.confirm
    )
    
    success = deployer.run_full_deployment()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()