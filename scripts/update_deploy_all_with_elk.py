#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª—è–µ–º deploy_all_optimized.py —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å ELK Stack –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ
—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ worker –Ω–æ–¥–µ –≤–º–µ—Å—Ç–µ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.
"""

from pathlib import Path

def update_deploy_script():
    """Patch deploy_all_optimized.py to include ELK deployment"""
    
    file_path = Path('scripts/deploy_all_optimized.py')
    content = file_path.read_text(encoding='utf-8')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è ELK
    if '--enable-elk' not in content:
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç
        content = content.replace(
            'parser.add_argument("--dns01", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DNS-01 (Cloudflare) –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω CF_API_TOKEN")',
            '''parser.add_argument("--dns01", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DNS-01 (Cloudflare) –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω CF_API_TOKEN")
    parser.add_argument("--enable-elk", action="store_true", help="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å ELK Stack –Ω–∞ worker –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--elk-retention", type=int, default=15, help="–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ ELK (–¥–Ω–µ–π)")
    parser.add_argument("--elk-light", action="store_true", help="–û–±–ª–µ–≥—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º ELK (–º–µ–Ω—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤)")
    parser.add_argument("--elk-light", action="store_true", help="–û–±–ª–µ–≥—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º ELK (–º–µ–Ω—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤)")'''
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        content = content.replace(
            'def __init__(self, domain: str, email: str, enable_gpu: bool, use_dns01: bool):',
            'def __init__(self, domain: str, email: str, enable_gpu: bool, use_dns01: bool, enable_elk: bool = False, elk_retention: int = 15, elk_light: bool = False):'
        )
        
        content = content.replace(
            'self.use_dns01 = use_dns01',
            '''self.use_dns01 = use_dns01
        self.enable_elk = enable_elk
        self.elk_retention = elk_retention
        self.elk_light = elk_light'''
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è ELK
        elk_method = '''    
    def deploy_elk_stack_on_worker(self):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ELK Stack –Ω–∞ worker –Ω–æ–¥–µ"""
        if not self.enable_elk:
            return True
            
        self.log_info("–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ELK Stack –Ω–∞ worker...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        elk_cmd = [
            "python3", "scripts/deploy_elk_on_worker.py",
            "--domain", self.domain,
            "--retention-days", str(self.elk_retention)
        ]
        
        if self.elk_light:
            elk_cmd.append("--light-mode")
        
        result = subprocess.run(elk_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            self.log_success(f"ELK Stack —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ worker: https://kibana.{self.domain}")
            if not self.elk_light:
                self.log_success(f"Jaeger —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç: https://jaeger.{self.domain}")
            return True
        else:
            self.log_error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ELK: {result.stderr}")
            return False
'''
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥ deploy_worker_components
        content = content.replace(
            'def deploy_worker_components(self) -> bool:',
            elk_method + '\n    def deploy_worker_components(self) -> bool:'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ ELK –≤ deploy_worker_components
        content = content.replace(
            '        # 5. GPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)',
            '''        # 5. ELK Stack (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if not self.deploy_elk_stack_on_worker():
            self.log_error("–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ELK Stack")
        
        # 6. GPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)'''
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
        content = content.replace(
            '''deployer = OptimizedClusterDeployer(
        domain=args.domain,
        email=args.email,
        enable_gpu=args.gpu.lower() == "true",
        use_dns01=args.dns01
    )''',
            '''deployer = OptimizedClusterDeployer(
        domain=args.domain,
        email=args.email,
        enable_gpu=args.gpu.lower() == "true",
        use_dns01=args.dns01,
        enable_elk=args.enable_elk,
        elk_retention=args.elk_retention,
        elk_light=args.elk_light
    )'''
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º show_resource_distribution
        content = content.replace(
            'print(f"  ‚úÖ Kubevious (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)")',
            '''print(f"  ‚úÖ Kubevious (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)")
            if self.enable_elk:
                print(f"  ‚úÖ ELK Stack (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)")
                if not self.elk_light:
                    print(f"  ‚úÖ Jaeger (—Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞)")'''
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ URL
        content = content.replace(
            'print(f"  ‚Ä¢ Kubevious: https://kubevious.{self.domain}")',
            '''print(f"  ‚Ä¢ Kubevious: https://kubevious.{self.domain}")
        if self.enable_elk:
            print(f"  ‚Ä¢ Kibana:    https://kibana.{self.domain}")
            if not self.elk_light:
                print(f"  ‚Ä¢ Jaeger:    https://jaeger.{self.domain}")'''
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM –Ω–∞ worker
        content = content.replace(
            'print(f"  üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ~4% CPU, ~3% RAM")',
            '''elk_ram_usage = "~6-8% RAM" if self.enable_elk else "~3% RAM"
            elk_cpu_usage = "~6-8% CPU" if self.enable_elk else "~4% CPU"
            print(f"  üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {elk_cpu_usage}, {elk_ram_usage}")'''
        )
    
    file_path.write_text(content, encoding='utf-8')
    print('‚úÖ deploy_all_optimized.py –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ELK Stack')

if __name__ == '__main__':
    update_deploy_script()